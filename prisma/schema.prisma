generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                      @id @default(uuid())
  name               String
  email              String
  emailVerified      Boolean
  image              String?
  createdAt          DateTime
  updatedAt          DateTime
  role               String?
  banned             Boolean?
  banReason          String?
  banExpires         DateTime?
  theme              String?
  sessions           Session[]
  accounts           Account[]
  notifications      Notification[]
  documents          Document[]
  folders            DocumentFolder[]
  createdVersions    DocumentVersion[]
  createdAttachments Attachment[]
  sharedFolders      FolderShare[]
  projects           Project[]
  fundRequests       FundRequest[]
  volunteerRequests  VolunteerRequest[]
  volunteers         Volunteer[]
  ownedBoards        KanbanBoard[]               @relation("BoardOwner")
  memberBoards       KanbanBoard[]               @relation("BoardMembers")
  cards              KanbanCard[]
  assignees          KanbanCardAssignee[]
  comments           KanbanComment[]
  messages           Message[]
  rooms              DiscussionRoomParticipant[]

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model DocumentFolder {
  id             String   @id @default(uuid())
  title          String
  isRestricted   Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  parentFolderId String?
  createdById    String

  documents   Document[]
  createdBy   User          @relation(fields: [createdById], references: [id])
  shares      FolderShare[]
  inviteToken String?

  @@unique([title])
  @@map("document_folder")
}

model Document {
  id               String               @id @default(uuid())
  title            String
  category         DocumentCategoryType @default(Proposals)
  archived         Boolean              @default(false)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  createdById      String
  documentFolderId String

  createdBy        User              @relation(fields: [createdById], references: [id])
  documentFolder   DocumentFolder    @relation(fields: [documentFolderId], references: [id], onDelete: Cascade)
  documentVersions DocumentVersion[]
  Project          Project?          @relation(fields: [projectId], references: [id])
  projectId        String?
  FundRequest      FundRequest?      @relation(fields: [fundRequestId], references: [id])
  fundRequestId    String?

  @@map("document")
}

model DocumentVersion {
  id           String   @id @default(uuid())
  version      String
  message      String?
  attachmentId String
  createdAt    DateTime @default(now())
  createdById  String
  documentId   String

  createdBy  User       @relation(fields: [createdById], references: [id])
  document   Document   @relation(fields: [documentId], references: [id], onDelete: Cascade)
  attachment Attachment @relation(fields: [attachmentId], references: [id], onDelete: Cascade)

  @@map("document_version")
}

model Attachment {
  id          String   @id @default(uuid())
  name        String
  type        String
  size        Int
  storageId   String
  createdAt   DateTime @default(now())
  createdById String

  createdBy        User              @relation(fields: [createdById], references: [id])
  documentVersions DocumentVersion[]

  @@map("attachment")
}

model FolderShare {
  id         String         @id @default(uuid())
  folderId   String
  userId     String
  permission PermissionType @default(READ)

  folder DocumentFolder @relation(fields: [folderId], references: [id], onDelete: Cascade)
  user   User           @relation(fields: [userId], references: [id])

  @@unique([folderId, userId])
  @@map("folder_share")
}

model Project {
  id                String             @id @default(uuid())
  title             String             @unique
  budget            Float
  description       String
  status            ProjectStatusType
  needsAttention    Boolean            @default(false)
  from              DateTime
  to                DateTime
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  createdById       String
  revisionRequest   Boolean            @default(false)
  revisionReason    String?
  rejectedReason    String?
  isConfirmed       Boolean            @default(false)
  discussionId      String?
  completionDate    DateTime?
  createdBy         User               @relation(fields: [createdById], references: [id])
  documents         Document[]
  fundRequests      FundRequest[]
  projectHistories  ProjectHistory[]
  volunteerRequests VolunteerRequest[]

  @@map("project")
}

model ProjectHistory {
  id        String   @id @default(uuid())
  title     String
  subtitle  String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("project_history")
}

model FundRequest {
  id              String                  @id @default(uuid())
  amount          Float
  reason          String
  status          FundRequestStatusType
  category        FundRequestCategoryType @default(Donation)
  projectId       String
  createdById     String
  createdAt       DateTime                @default(now())
  discussionId    String?
  releaseDate     DateTime? // date when the fund is released
  referenceNumber String? // bank transfer reference number
  rejectedReason  String?
  project         Project                 @relation(fields: [projectId], references: [id])
  createdBy       User                    @relation(fields: [createdById], references: [id])
  documents       Document[]

  @@map("fund_request")
}

model VolunteerRequest {
  id               String                 @id @default(uuid())
  projectId        String
  createdById      String
  message          String
  status           VolunteerRequestStatus @default(Open)
  participantLimit Int
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  project          Project                @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy        User                   @relation(fields: [createdById], references: [id])
  volunteers       Volunteer[]

  @@map("volunteer_request")
}

model VolunteerAvailability {
  id          String @id @default(uuid())
  volunteerId String
  day         String

  volunteer Volunteer @relation(fields: [volunteerId], references: [id], onDelete: Cascade)

  @@map("volunteer_availability")
}

model Volunteer {
  id                 String                  @id @default(uuid())
  userId             String
  volunteerRequestId String
  joinedAt           DateTime                @default(now())
  user               User                    @relation(fields: [userId], references: [id])
  volunteerRequest   VolunteerRequest        @relation(fields: [volunteerRequestId], references: [id], onDelete: Cascade)
  status             VolunteerStatus         @default(Pending)
  availability       VolunteerAvailability[]
  volunteerForm      VolunteerForm[]

  @@unique([userId, volunteerRequestId])
  @@map("volunteer")
}

model VolunteerForm {
  id          String    @id @default(uuid())
  motivation  String
  experience  String
  volunteerId String
  volunteer   Volunteer @relation(fields: [volunteerId], references: [id], onDelete: Cascade)

  @@map("volunteer_form")
}

model KanbanBoard {
  id        String         @id @default(uuid())
  projectId String         @unique
  name      String
  ownerId   String
  owner     User           @relation("BoardOwner", fields: [ownerId], references: [id])
  members   User[]         @relation("BoardMembers")
  columns   KanbanColumn[]
  labels    KanbanLabel[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map("kanban_board")
}

model KanbanColumn {
  id        String           @id @default(uuid())
  title     String
  position  Int
  boardId   String
  board     KanbanBoard      @relation(fields: [boardId], references: [id])
  cards     KanbanCard[]
  color     KanbanColorType? @default(Gray)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("kanban_column")
}

model KanbanCard {
  id          String               @id @default(uuid())
  title       String
  position    Int
  dueDate     DateTime?
  description String?
  columnId    String
  column      KanbanColumn         @relation(fields: [columnId], references: [id])
  creatorId   String
  creator     User                 @relation(fields: [creatorId], references: [id])
  assignees   KanbanCardAssignee[]
  labels      KanbanCardLabel[]
  comments    KanbanComment[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  @@map("kanban_card")
}

model KanbanLabel {
  id        String            @id @default(uuid())
  name      String
  color     String
  boardId   String
  board     KanbanBoard       @relation(fields: [boardId], references: [id])
  labels    KanbanCardLabel[]
  createdAt DateTime          @default(now())

  @@map("kanban_label")
}

model KanbanCardAssignee {
  cardId String
  userId String
  card   KanbanCard @relation(fields: [cardId], references: [id], onDelete: Cascade)
  user   User       @relation(fields: [userId], references: [id])

  @@id([cardId, userId])
  @@map("kanban_card_assignee")
}

model KanbanCardLabel {
  cardId  String
  labelId String
  card    KanbanCard  @relation(fields: [cardId], references: [id], onDelete: Cascade)
  label   KanbanLabel @relation(fields: [labelId], references: [id])

  @@id([cardId, labelId])
  @@map("kanban_card_label")
}

model KanbanComment {
  id        String     @id @default(uuid())
  content   String
  cardId    String
  card      KanbanCard @relation(fields: [cardId], references: [id])
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())

  @@map("kanban_comment")
}

model Notification {
  id        String   @id @default(uuid())
  link      String?
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@map("notification")
}

model DiscussionRoom {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  projectId     String?
  fundRequestId String?
  messages      Message[]
  participants  DiscussionRoomParticipant[]
}

model DiscussionRoomParticipant {
  id     String         @id @default(uuid())
  userId String
  roomId String
  user   User           @relation(fields: [userId], references: [id])
  room   DiscussionRoom @relation(fields: [roomId], references: [id])

  @@unique([userId, roomId])
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  roomId String
  room   DiscussionRoom @relation(fields: [roomId], references: [id])
}

enum FundRequestStatusType {
  Pending
  Approved
  Rejected
  Released
}

enum FundRequestCategoryType {
  Training
  Material
  Donation
}

enum DocumentCategoryType {
  Reports
  Contracts
  Compliance
  Proposals
}

enum ProjectStatusType {
  Pending // <-- When Project is First Submitted.
  ProposalApproved
  BudgetApproved
  Approved // <-- When the Project is Approved. note: This is the stage where the submitter can post volunteer requests
  Rejected // <-- When the Project is Rejected.
  Revision // <-- When the Project is for Revision. note: After the submitter revised the project, it goes back to "Pending" Status
  Ongoing // <-- When the Project is on progress. 
  HighRisk // <-- eme lang
  Completed // <-- The submitter can set it to completed.
}

enum VolunteerRequestStatus {
  Open
  Closed
  Filled
  Cancelled
}

enum KanbanColorType {
  Red
  Green
  Blue
  Violet
  Orange
  Yellow
  Gray
}

enum PermissionType {
  READ
  WRITE
  OWNER
}

enum VolunteerStatus {
  Pending
  Approved
  Rejected
}
